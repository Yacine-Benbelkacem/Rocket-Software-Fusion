// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Subscriber.h
 * This header file contains the declaration of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _S_SUBSCRIBER_H_
#define _S_SUBSCRIBER_H_

#include <fastrtps/Domain.h>
#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/subscriber/Subscriber.h>
#include <fastrtps/attributes/SubscriberAttributes.h>
#include <fastrtps/fastrtps_fwd.h>
#include <fastrtps/subscriber/SubscriberListener.h>
#include <fastrtps/subscriber/SampleInfo.h>
#include <fastrtps/TopicDataType.h>
#include <mutex>
#include <condition_variable>

template<class T, class S>
class Subscriber_s
{
public:
	Subscriber_s();
	virtual ~Subscriber_s();
	bool init(char* const node_name_,char* const topic_name_);
    bool init(char* const node_name_, char* const topic_name_,void (*callback_)());
    void spin();
	void get_data(S* st);
	
private:
	eprosima::fastrtps::Participant *mp_participant;
	eprosima::fastrtps::Subscriber *mp_subscriber;

	class SubListener : public eprosima::fastrtps::SubscriberListener
	{
	public:
		SubListener() : n_matched(0),n_msg(0){};
		~SubListener(){};
		void onSubscriptionMatched(eprosima::fastrtps::Subscriber* sub,eprosima::fastrtps::rtps::MatchingInfo& info);
		void onNewDataMessage(eprosima::fastrtps::Subscriber* sub);
		eprosima::fastrtps::SampleInfo_t m_info;
		int n_matched;
		int n_msg;
		S data_;
		std::mutex data_mutex;
        std::mutex spin_mutex;
        std::condition_variable cv;
        void (*callback)()=NULL;
	} m_listener;
	
	T myType;
};






//////////////////////////////// IMPLEMENTATION







using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

template <class T, class S>
Subscriber_s<T, S>::Subscriber_s() : mp_participant(nullptr), mp_subscriber(nullptr) {}

template <class T, class S>
Subscriber_s< T, S>::~Subscriber_s() {	Domain::removeParticipant(mp_participant);}

template <class T, class S>
bool Subscriber_s< T, S>::init(char* const node_name_, char* const topic_name_)
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.setName(node_name_); //You can put the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    // Create Subscriber
     printf("Topic name %s \n", topic_name_);

    SubscriberAttributes Rparam;
    Rparam.topic.topicKind = NO_KEY;
    Rparam.topic.topicDataType = myType.getName(); //Must be registered before the creation of the subscriber
    Rparam.topic.topicName = topic_name_;
    mp_subscriber = Domain::createSubscriber(mp_participant,Rparam, static_cast<SubscriberListener*>(&m_listener));
    if(mp_subscriber == nullptr)
    {
        return false;
    }
    return true;
}

template <class T, class S>
bool Subscriber_s< T, S>::init(char* const node_name_, char* const topic_name_, void (*callback_)())
{
    m_listener.callback = callback_;
    return init(node_name_,topic_name_);
}



template<class T, class S>
void Subscriber_s< T, S>::SubListener::onSubscriptionMatched(Subscriber* sub,MatchingInfo& info)
{
    (void)sub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "Subscriber matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "Subscriber unmatched" << std::endl;
    }
}

template<class T, class S>
void Subscriber_s< T, S>::SubListener::onNewDataMessage(Subscriber* sub)
{
    // Take data
    S st;

    if(sub->takeNextData(&st, &m_info))
    {
        if(m_info.sampleKind == ALIVE)
        {
            // Print your structure data here.
            ++n_msg;
            
            data_mutex.lock();
                data_ = st;
            data_mutex.unlock();

                if (  !(callback == NULL)  ){
                    callback();
                }

            cv.notify_one();

            //std::cout << "Sample received, count=" << n_msg << std::endl;
        }
    }
}

template<class T, class S>
void Subscriber_s< T, S>::get_data(S* st)
{
    m_listener.data_mutex.lock();
        *st = m_listener.data_;
    m_listener.data_mutex.unlock();
}


template<class T, class S>
void Subscriber_s< T, S>::spin()
{
    for(;;){
        std::unique_lock<std::mutex> lock(m_listener.spin_mutex);
        m_listener.cv.wait(lock);
    }
}

#endif 

