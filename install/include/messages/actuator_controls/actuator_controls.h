// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file actuator_controls.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _ACTUATOR_CONTROLS_H_
#define _ACTUATOR_CONTROLS_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(actuator_controls_SOURCE)
#define actuator_controls_DllAPI __declspec( dllexport )
#else
#define actuator_controls_DllAPI __declspec( dllimport )
#endif // actuator_controls_SOURCE
#else
#define actuator_controls_DllAPI
#endif
#else
#define actuator_controls_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


const uint8_t actuator_controls__NUM_ACTUATOR_CONTROLS = 8;
const uint8_t actuator_controls__NUM_ACTUATOR_CONTROL_GROUPS = 6;
const uint8_t actuator_controls__INDEX_ROLL = 0;
const uint8_t actuator_controls__INDEX_PITCH = 1;
const uint8_t actuator_controls__INDEX_YAW = 2;
const uint8_t actuator_controls__INDEX_THROTTLE = 3;
const uint8_t actuator_controls__INDEX_FLAPS = 4;
const uint8_t actuator_controls__INDEX_SPOILERS = 5;
const uint8_t actuator_controls__INDEX_AIRBRAKES = 6;
const uint8_t actuator_controls__INDEX_LANDING_GEAR = 7;
const uint8_t actuator_controls__INDEX_GIMBAL_SHUTTER = 3;
const uint8_t actuator_controls__INDEX_CAMERA_ZOOM = 4;
const uint8_t actuator_controls__GROUP_INDEX_ATTITUDE = 0;
const uint8_t actuator_controls__GROUP_INDEX_ATTITUDE_ALTERNATE = 1;
const uint8_t actuator_controls__GROUP_INDEX_GIMBAL = 2;
const uint8_t actuator_controls__GROUP_INDEX_MANUAL_PASSTHROUGH = 3;
const uint8_t actuator_controls__GROUP_INDEX_ALLOCATED_PART1 = 4;
const uint8_t actuator_controls__GROUP_INDEX_ALLOCATED_PART2 = 5;
const uint8_t actuator_controls__GROUP_INDEX_PAYLOAD = 6;
typedef std::array<float, 8> actuator_controls__float_array_8;
/*!
 * @brief This class represents the structure actuator_controls defined by the user in the IDL file.
 * @ingroup ACTUATOR_CONTROLS
 */
class actuator_controls
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport actuator_controls();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~actuator_controls();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object actuator_controls that will be copied.
     */
    eProsima_user_DllExport actuator_controls(const actuator_controls &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object actuator_controls that will be copied.
     */
    eProsima_user_DllExport actuator_controls(actuator_controls &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object actuator_controls that will be copied.
     */
    eProsima_user_DllExport actuator_controls& operator=(const actuator_controls &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object actuator_controls that will be copied.
     */
    eProsima_user_DllExport actuator_controls& operator=(actuator_controls &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function sets a value in member timestamp_sample_
     * @param _timestamp_sample_ New value for member timestamp_sample_
     */
    eProsima_user_DllExport void timestamp_sample_(uint64_t _timestamp_sample_);

    /*!
     * @brief This function returns the value of member timestamp_sample_
     * @return Value of member timestamp_sample_
     */
    eProsima_user_DllExport uint64_t timestamp_sample_() const;

    /*!
     * @brief This function returns a reference to member timestamp_sample_
     * @return Reference to member timestamp_sample_
     */
    eProsima_user_DllExport uint64_t& timestamp_sample_();

    /*!
     * @brief This function copies the value in member control
     * @param _control New value to be copied in member control
     */
    eProsima_user_DllExport void control(const actuator_controls__float_array_8 &_control);

    /*!
     * @brief This function moves the value in member control
     * @param _control New value to be moved in member control
     */
    eProsima_user_DllExport void control(actuator_controls__float_array_8 &&_control);

    /*!
     * @brief This function returns a constant reference to member control
     * @return Constant reference to member control
     */
    eProsima_user_DllExport const actuator_controls__float_array_8& control() const;

    /*!
     * @brief This function returns a reference to member control
     * @return Reference to member control
     */
    eProsima_user_DllExport actuator_controls__float_array_8& control();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const actuator_controls& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    uint64_t m_timestamp_sample_;
    actuator_controls__float_array_8 m_control;
};

#endif // _ACTUATOR_CONTROLS_H_