// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file fsmDataOut.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "fsmDataOut.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

fsmDataOut::fsmDataOut()
{
    // m_state com.eprosima.idl.parser.typecode.StringTypeCode@2e4b8173
    m_state ="";

}

fsmDataOut::~fsmDataOut()
{
}

fsmDataOut::fsmDataOut(const fsmDataOut &x)
{
    m_state = x.m_state;
}

fsmDataOut::fsmDataOut(fsmDataOut &&x)
{
    m_state = std::move(x.m_state);
}

fsmDataOut& fsmDataOut::operator=(const fsmDataOut &x)
{

    m_state = x.m_state;

    return *this;
}

fsmDataOut& fsmDataOut::operator=(fsmDataOut &&x)
{

    m_state = std::move(x.m_state);

    return *this;
}

size_t fsmDataOut::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t fsmDataOut::getCdrSerializedSize(const fsmDataOut& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.state().size() + 1;

    return current_alignment - initial_alignment;
}

void fsmDataOut::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_state;
}

void fsmDataOut::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_state;
}

/*!
 * @brief This function copies the value in member state
 * @param _state New value to be copied in member state
 */
void fsmDataOut::state(const std::string &_state)
{
m_state = _state;
}

/*!
 * @brief This function moves the value in member state
 * @param _state New value to be moved in member state
 */
void fsmDataOut::state(std::string &&_state)
{
m_state = std::move(_state);
}

/*!
 * @brief This function returns a constant reference to member state
 * @return Constant reference to member state
 */
const std::string& fsmDataOut::state() const
{
    return m_state;
}

/*!
 * @brief This function returns a reference to member state
 * @return Reference to member state
 */
std::string& fsmDataOut::state()
{
    return m_state;
}

size_t fsmDataOut::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool fsmDataOut::isKeyDefined()
{
   return false;
}

void fsmDataOut::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
}
