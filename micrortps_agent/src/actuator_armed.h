// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file actuator_armed.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _ACTUATOR_ARMED_H_
#define _ACTUATOR_ARMED_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(actuator_armed_SOURCE)
#define actuator_armed_DllAPI __declspec( dllexport )
#else
#define actuator_armed_DllAPI __declspec( dllimport )
#endif // actuator_armed_SOURCE
#else
#define actuator_armed_DllAPI
#endif
#else
#define actuator_armed_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure actuator_armed defined by the user in the IDL file.
 * @ingroup ACTUATOR_ARMED
 */
class actuator_armed
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport actuator_armed();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~actuator_armed();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object actuator_armed that will be copied.
     */
    eProsima_user_DllExport actuator_armed(const actuator_armed &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object actuator_armed that will be copied.
     */
    eProsima_user_DllExport actuator_armed(actuator_armed &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object actuator_armed that will be copied.
     */
    eProsima_user_DllExport actuator_armed& operator=(const actuator_armed &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object actuator_armed that will be copied.
     */
    eProsima_user_DllExport actuator_armed& operator=(actuator_armed &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function sets a value in member armed_
     * @param _armed_ New value for member armed_
     */
    eProsima_user_DllExport void armed_(bool _armed_);

    /*!
     * @brief This function returns the value of member armed_
     * @return Value of member armed_
     */
    eProsima_user_DllExport bool armed_() const;

    /*!
     * @brief This function returns a reference to member armed_
     * @return Reference to member armed_
     */
    eProsima_user_DllExport bool& armed_();

    /*!
     * @brief This function sets a value in member prearmed_
     * @param _prearmed_ New value for member prearmed_
     */
    eProsima_user_DllExport void prearmed_(bool _prearmed_);

    /*!
     * @brief This function returns the value of member prearmed_
     * @return Value of member prearmed_
     */
    eProsima_user_DllExport bool prearmed_() const;

    /*!
     * @brief This function returns a reference to member prearmed_
     * @return Reference to member prearmed_
     */
    eProsima_user_DllExport bool& prearmed_();

    /*!
     * @brief This function sets a value in member ready_to_arm_
     * @param _ready_to_arm_ New value for member ready_to_arm_
     */
    eProsima_user_DllExport void ready_to_arm_(bool _ready_to_arm_);

    /*!
     * @brief This function returns the value of member ready_to_arm_
     * @return Value of member ready_to_arm_
     */
    eProsima_user_DllExport bool ready_to_arm_() const;

    /*!
     * @brief This function returns a reference to member ready_to_arm_
     * @return Reference to member ready_to_arm_
     */
    eProsima_user_DllExport bool& ready_to_arm_();

    /*!
     * @brief This function sets a value in member lockdown_
     * @param _lockdown_ New value for member lockdown_
     */
    eProsima_user_DllExport void lockdown_(bool _lockdown_);

    /*!
     * @brief This function returns the value of member lockdown_
     * @return Value of member lockdown_
     */
    eProsima_user_DllExport bool lockdown_() const;

    /*!
     * @brief This function returns a reference to member lockdown_
     * @return Reference to member lockdown_
     */
    eProsima_user_DllExport bool& lockdown_();

    /*!
     * @brief This function sets a value in member manual_lockdown_
     * @param _manual_lockdown_ New value for member manual_lockdown_
     */
    eProsima_user_DllExport void manual_lockdown_(bool _manual_lockdown_);

    /*!
     * @brief This function returns the value of member manual_lockdown_
     * @return Value of member manual_lockdown_
     */
    eProsima_user_DllExport bool manual_lockdown_() const;

    /*!
     * @brief This function returns a reference to member manual_lockdown_
     * @return Reference to member manual_lockdown_
     */
    eProsima_user_DllExport bool& manual_lockdown_();

    /*!
     * @brief This function sets a value in member force_failsafe_
     * @param _force_failsafe_ New value for member force_failsafe_
     */
    eProsima_user_DllExport void force_failsafe_(bool _force_failsafe_);

    /*!
     * @brief This function returns the value of member force_failsafe_
     * @return Value of member force_failsafe_
     */
    eProsima_user_DllExport bool force_failsafe_() const;

    /*!
     * @brief This function returns a reference to member force_failsafe_
     * @return Reference to member force_failsafe_
     */
    eProsima_user_DllExport bool& force_failsafe_();

    /*!
     * @brief This function sets a value in member in_esc_calibration_mode_
     * @param _in_esc_calibration_mode_ New value for member in_esc_calibration_mode_
     */
    eProsima_user_DllExport void in_esc_calibration_mode_(bool _in_esc_calibration_mode_);

    /*!
     * @brief This function returns the value of member in_esc_calibration_mode_
     * @return Value of member in_esc_calibration_mode_
     */
    eProsima_user_DllExport bool in_esc_calibration_mode_() const;

    /*!
     * @brief This function returns a reference to member in_esc_calibration_mode_
     * @return Reference to member in_esc_calibration_mode_
     */
    eProsima_user_DllExport bool& in_esc_calibration_mode_();

    /*!
     * @brief This function sets a value in member soft_stop_
     * @param _soft_stop_ New value for member soft_stop_
     */
    eProsima_user_DllExport void soft_stop_(bool _soft_stop_);

    /*!
     * @brief This function returns the value of member soft_stop_
     * @return Value of member soft_stop_
     */
    eProsima_user_DllExport bool soft_stop_() const;

    /*!
     * @brief This function returns a reference to member soft_stop_
     * @return Reference to member soft_stop_
     */
    eProsima_user_DllExport bool& soft_stop_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const actuator_armed& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    bool m_armed_;
    bool m_prearmed_;
    bool m_ready_to_arm_;
    bool m_lockdown_;
    bool m_manual_lockdown_;
    bool m_force_failsafe_;
    bool m_in_esc_calibration_mode_;
    bool m_soft_stop_;
};

#endif // _ACTUATOR_ARMED_H_