// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file vehicle_command_ack.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "vehicle_command_ack.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>














vehicle_command_ack::vehicle_command_ack()
{
    // m_timestamp_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@20deea7f
    m_timestamp_ = 0;
    // m_command_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3835c46
    m_command_ = 0;
    // m_result_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1dde4cb2
    m_result_ = 0;
    // m_from_external_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7714e963
    m_from_external_ = false;
    // m_result_param1_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@20ce78ec
    m_result_param1_ = 0;
    // m_result_param2_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@393671df
    m_result_param2_ = 0;
    // m_target_system_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@56620197
    m_target_system_ = 0;
    // m_target_component_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6eda5c9
    m_target_component_ = 0;

}

vehicle_command_ack::~vehicle_command_ack()
{








}

vehicle_command_ack::vehicle_command_ack(const vehicle_command_ack &x)
{
    m_timestamp_ = x.m_timestamp_;
    m_command_ = x.m_command_;
    m_result_ = x.m_result_;
    m_from_external_ = x.m_from_external_;
    m_result_param1_ = x.m_result_param1_;
    m_result_param2_ = x.m_result_param2_;
    m_target_system_ = x.m_target_system_;
    m_target_component_ = x.m_target_component_;
}

vehicle_command_ack::vehicle_command_ack(vehicle_command_ack &&x)
{
    m_timestamp_ = x.m_timestamp_;
    m_command_ = x.m_command_;
    m_result_ = x.m_result_;
    m_from_external_ = x.m_from_external_;
    m_result_param1_ = x.m_result_param1_;
    m_result_param2_ = x.m_result_param2_;
    m_target_system_ = x.m_target_system_;
    m_target_component_ = x.m_target_component_;
}

vehicle_command_ack& vehicle_command_ack::operator=(const vehicle_command_ack &x)
{

    m_timestamp_ = x.m_timestamp_;
    m_command_ = x.m_command_;
    m_result_ = x.m_result_;
    m_from_external_ = x.m_from_external_;
    m_result_param1_ = x.m_result_param1_;
    m_result_param2_ = x.m_result_param2_;
    m_target_system_ = x.m_target_system_;
    m_target_component_ = x.m_target_component_;

    return *this;
}

vehicle_command_ack& vehicle_command_ack::operator=(vehicle_command_ack &&x)
{

    m_timestamp_ = x.m_timestamp_;
    m_command_ = x.m_command_;
    m_result_ = x.m_result_;
    m_from_external_ = x.m_from_external_;
    m_result_param1_ = x.m_result_param1_;
    m_result_param2_ = x.m_result_param2_;
    m_target_system_ = x.m_target_system_;
    m_target_component_ = x.m_target_component_;

    return *this;
}

size_t vehicle_command_ack::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t vehicle_command_ack::getCdrSerializedSize(const vehicle_command_ack& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void vehicle_command_ack::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp_;
    scdr << m_command_;
    scdr << m_result_;
    scdr << m_from_external_;
    scdr << m_result_param1_;
    scdr << m_result_param2_;
    scdr << m_target_system_;
    scdr << m_target_component_;
}

void vehicle_command_ack::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp_;
    dcdr >> m_command_;
    dcdr >> m_result_;
    dcdr >> m_from_external_;
    dcdr >> m_result_param1_;
    dcdr >> m_result_param2_;
    dcdr >> m_target_system_;
    dcdr >> m_target_component_;
}

/*!
 * @brief This function sets a value in member timestamp_
 * @param _timestamp_ New value for member timestamp_
 */
void vehicle_command_ack::timestamp_(uint64_t _timestamp_)
{
m_timestamp_ = _timestamp_;
}

/*!
 * @brief This function returns the value of member timestamp_
 * @return Value of member timestamp_
 */
uint64_t vehicle_command_ack::timestamp_() const
{
    return m_timestamp_;
}

/*!
 * @brief This function returns a reference to member timestamp_
 * @return Reference to member timestamp_
 */
uint64_t& vehicle_command_ack::timestamp_()
{
    return m_timestamp_;
}

/*!
 * @brief This function sets a value in member command_
 * @param _command_ New value for member command_
 */
void vehicle_command_ack::command_(uint32_t _command_)
{
m_command_ = _command_;
}

/*!
 * @brief This function returns the value of member command_
 * @return Value of member command_
 */
uint32_t vehicle_command_ack::command_() const
{
    return m_command_;
}

/*!
 * @brief This function returns a reference to member command_
 * @return Reference to member command_
 */
uint32_t& vehicle_command_ack::command_()
{
    return m_command_;
}

/*!
 * @brief This function sets a value in member result_
 * @param _result_ New value for member result_
 */
void vehicle_command_ack::result_(uint8_t _result_)
{
m_result_ = _result_;
}

/*!
 * @brief This function returns the value of member result_
 * @return Value of member result_
 */
uint8_t vehicle_command_ack::result_() const
{
    return m_result_;
}

/*!
 * @brief This function returns a reference to member result_
 * @return Reference to member result_
 */
uint8_t& vehicle_command_ack::result_()
{
    return m_result_;
}

/*!
 * @brief This function sets a value in member from_external_
 * @param _from_external_ New value for member from_external_
 */
void vehicle_command_ack::from_external_(bool _from_external_)
{
m_from_external_ = _from_external_;
}

/*!
 * @brief This function returns the value of member from_external_
 * @return Value of member from_external_
 */
bool vehicle_command_ack::from_external_() const
{
    return m_from_external_;
}

/*!
 * @brief This function returns a reference to member from_external_
 * @return Reference to member from_external_
 */
bool& vehicle_command_ack::from_external_()
{
    return m_from_external_;
}

/*!
 * @brief This function sets a value in member result_param1_
 * @param _result_param1_ New value for member result_param1_
 */
void vehicle_command_ack::result_param1_(uint8_t _result_param1_)
{
m_result_param1_ = _result_param1_;
}

/*!
 * @brief This function returns the value of member result_param1_
 * @return Value of member result_param1_
 */
uint8_t vehicle_command_ack::result_param1_() const
{
    return m_result_param1_;
}

/*!
 * @brief This function returns a reference to member result_param1_
 * @return Reference to member result_param1_
 */
uint8_t& vehicle_command_ack::result_param1_()
{
    return m_result_param1_;
}

/*!
 * @brief This function sets a value in member result_param2_
 * @param _result_param2_ New value for member result_param2_
 */
void vehicle_command_ack::result_param2_(int32_t _result_param2_)
{
m_result_param2_ = _result_param2_;
}

/*!
 * @brief This function returns the value of member result_param2_
 * @return Value of member result_param2_
 */
int32_t vehicle_command_ack::result_param2_() const
{
    return m_result_param2_;
}

/*!
 * @brief This function returns a reference to member result_param2_
 * @return Reference to member result_param2_
 */
int32_t& vehicle_command_ack::result_param2_()
{
    return m_result_param2_;
}

/*!
 * @brief This function sets a value in member target_system_
 * @param _target_system_ New value for member target_system_
 */
void vehicle_command_ack::target_system_(uint8_t _target_system_)
{
m_target_system_ = _target_system_;
}

/*!
 * @brief This function returns the value of member target_system_
 * @return Value of member target_system_
 */
uint8_t vehicle_command_ack::target_system_() const
{
    return m_target_system_;
}

/*!
 * @brief This function returns a reference to member target_system_
 * @return Reference to member target_system_
 */
uint8_t& vehicle_command_ack::target_system_()
{
    return m_target_system_;
}

/*!
 * @brief This function sets a value in member target_component_
 * @param _target_component_ New value for member target_component_
 */
void vehicle_command_ack::target_component_(uint8_t _target_component_)
{
m_target_component_ = _target_component_;
}

/*!
 * @brief This function returns the value of member target_component_
 * @return Value of member target_component_
 */
uint8_t vehicle_command_ack::target_component_() const
{
    return m_target_component_;
}

/*!
 * @brief This function returns a reference to member target_component_
 * @return Reference to member target_component_
 */
uint8_t& vehicle_command_ack::target_component_()
{
    return m_target_component_;
}


size_t vehicle_command_ack::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;











    return current_align;
}

bool vehicle_command_ack::isKeyDefined()
{
   return false;
}

void vehicle_command_ack::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
}
