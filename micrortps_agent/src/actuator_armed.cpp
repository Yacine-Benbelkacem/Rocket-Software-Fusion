// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file actuator_armed.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "actuator_armed.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

actuator_armed::actuator_armed()
{
    // m_timestamp_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@31d7b7bf
    m_timestamp_ = 0;
    // m_armed_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@635eaaf1
    m_armed_ = false;
    // m_prearmed_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5c30a9b0
    m_prearmed_ = false;
    // m_ready_to_arm_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1ddf84b8
    m_ready_to_arm_ = false;
    // m_lockdown_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1139b2f3
    m_lockdown_ = false;
    // m_manual_lockdown_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7a69b07
    m_manual_lockdown_ = false;
    // m_force_failsafe_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5e82df6a
    m_force_failsafe_ = false;
    // m_in_esc_calibration_mode_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6ca8564a
    m_in_esc_calibration_mode_ = false;
    // m_soft_stop_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@50b472aa
    m_soft_stop_ = false;

}

actuator_armed::~actuator_armed()
{









}

actuator_armed::actuator_armed(const actuator_armed &x)
{
    m_timestamp_ = x.m_timestamp_;
    m_armed_ = x.m_armed_;
    m_prearmed_ = x.m_prearmed_;
    m_ready_to_arm_ = x.m_ready_to_arm_;
    m_lockdown_ = x.m_lockdown_;
    m_manual_lockdown_ = x.m_manual_lockdown_;
    m_force_failsafe_ = x.m_force_failsafe_;
    m_in_esc_calibration_mode_ = x.m_in_esc_calibration_mode_;
    m_soft_stop_ = x.m_soft_stop_;
}

actuator_armed::actuator_armed(actuator_armed &&x)
{
    m_timestamp_ = x.m_timestamp_;
    m_armed_ = x.m_armed_;
    m_prearmed_ = x.m_prearmed_;
    m_ready_to_arm_ = x.m_ready_to_arm_;
    m_lockdown_ = x.m_lockdown_;
    m_manual_lockdown_ = x.m_manual_lockdown_;
    m_force_failsafe_ = x.m_force_failsafe_;
    m_in_esc_calibration_mode_ = x.m_in_esc_calibration_mode_;
    m_soft_stop_ = x.m_soft_stop_;
}

actuator_armed& actuator_armed::operator=(const actuator_armed &x)
{

    m_timestamp_ = x.m_timestamp_;
    m_armed_ = x.m_armed_;
    m_prearmed_ = x.m_prearmed_;
    m_ready_to_arm_ = x.m_ready_to_arm_;
    m_lockdown_ = x.m_lockdown_;
    m_manual_lockdown_ = x.m_manual_lockdown_;
    m_force_failsafe_ = x.m_force_failsafe_;
    m_in_esc_calibration_mode_ = x.m_in_esc_calibration_mode_;
    m_soft_stop_ = x.m_soft_stop_;

    return *this;
}

actuator_armed& actuator_armed::operator=(actuator_armed &&x)
{

    m_timestamp_ = x.m_timestamp_;
    m_armed_ = x.m_armed_;
    m_prearmed_ = x.m_prearmed_;
    m_ready_to_arm_ = x.m_ready_to_arm_;
    m_lockdown_ = x.m_lockdown_;
    m_manual_lockdown_ = x.m_manual_lockdown_;
    m_force_failsafe_ = x.m_force_failsafe_;
    m_in_esc_calibration_mode_ = x.m_in_esc_calibration_mode_;
    m_soft_stop_ = x.m_soft_stop_;

    return *this;
}

size_t actuator_armed::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t actuator_armed::getCdrSerializedSize(const actuator_armed& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void actuator_armed::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp_;
    scdr << m_armed_;
    scdr << m_prearmed_;
    scdr << m_ready_to_arm_;
    scdr << m_lockdown_;
    scdr << m_manual_lockdown_;
    scdr << m_force_failsafe_;
    scdr << m_in_esc_calibration_mode_;
    scdr << m_soft_stop_;
}

void actuator_armed::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp_;
    dcdr >> m_armed_;
    dcdr >> m_prearmed_;
    dcdr >> m_ready_to_arm_;
    dcdr >> m_lockdown_;
    dcdr >> m_manual_lockdown_;
    dcdr >> m_force_failsafe_;
    dcdr >> m_in_esc_calibration_mode_;
    dcdr >> m_soft_stop_;
}

/*!
 * @brief This function sets a value in member timestamp_
 * @param _timestamp_ New value for member timestamp_
 */
void actuator_armed::timestamp_(uint64_t _timestamp_)
{
m_timestamp_ = _timestamp_;
}

/*!
 * @brief This function returns the value of member timestamp_
 * @return Value of member timestamp_
 */
uint64_t actuator_armed::timestamp_() const
{
    return m_timestamp_;
}

/*!
 * @brief This function returns a reference to member timestamp_
 * @return Reference to member timestamp_
 */
uint64_t& actuator_armed::timestamp_()
{
    return m_timestamp_;
}

/*!
 * @brief This function sets a value in member armed_
 * @param _armed_ New value for member armed_
 */
void actuator_armed::armed_(bool _armed_)
{
m_armed_ = _armed_;
}

/*!
 * @brief This function returns the value of member armed_
 * @return Value of member armed_
 */
bool actuator_armed::armed_() const
{
    return m_armed_;
}

/*!
 * @brief This function returns a reference to member armed_
 * @return Reference to member armed_
 */
bool& actuator_armed::armed_()
{
    return m_armed_;
}

/*!
 * @brief This function sets a value in member prearmed_
 * @param _prearmed_ New value for member prearmed_
 */
void actuator_armed::prearmed_(bool _prearmed_)
{
m_prearmed_ = _prearmed_;
}

/*!
 * @brief This function returns the value of member prearmed_
 * @return Value of member prearmed_
 */
bool actuator_armed::prearmed_() const
{
    return m_prearmed_;
}

/*!
 * @brief This function returns a reference to member prearmed_
 * @return Reference to member prearmed_
 */
bool& actuator_armed::prearmed_()
{
    return m_prearmed_;
}

/*!
 * @brief This function sets a value in member ready_to_arm_
 * @param _ready_to_arm_ New value for member ready_to_arm_
 */
void actuator_armed::ready_to_arm_(bool _ready_to_arm_)
{
m_ready_to_arm_ = _ready_to_arm_;
}

/*!
 * @brief This function returns the value of member ready_to_arm_
 * @return Value of member ready_to_arm_
 */
bool actuator_armed::ready_to_arm_() const
{
    return m_ready_to_arm_;
}

/*!
 * @brief This function returns a reference to member ready_to_arm_
 * @return Reference to member ready_to_arm_
 */
bool& actuator_armed::ready_to_arm_()
{
    return m_ready_to_arm_;
}

/*!
 * @brief This function sets a value in member lockdown_
 * @param _lockdown_ New value for member lockdown_
 */
void actuator_armed::lockdown_(bool _lockdown_)
{
m_lockdown_ = _lockdown_;
}

/*!
 * @brief This function returns the value of member lockdown_
 * @return Value of member lockdown_
 */
bool actuator_armed::lockdown_() const
{
    return m_lockdown_;
}

/*!
 * @brief This function returns a reference to member lockdown_
 * @return Reference to member lockdown_
 */
bool& actuator_armed::lockdown_()
{
    return m_lockdown_;
}

/*!
 * @brief This function sets a value in member manual_lockdown_
 * @param _manual_lockdown_ New value for member manual_lockdown_
 */
void actuator_armed::manual_lockdown_(bool _manual_lockdown_)
{
m_manual_lockdown_ = _manual_lockdown_;
}

/*!
 * @brief This function returns the value of member manual_lockdown_
 * @return Value of member manual_lockdown_
 */
bool actuator_armed::manual_lockdown_() const
{
    return m_manual_lockdown_;
}

/*!
 * @brief This function returns a reference to member manual_lockdown_
 * @return Reference to member manual_lockdown_
 */
bool& actuator_armed::manual_lockdown_()
{
    return m_manual_lockdown_;
}

/*!
 * @brief This function sets a value in member force_failsafe_
 * @param _force_failsafe_ New value for member force_failsafe_
 */
void actuator_armed::force_failsafe_(bool _force_failsafe_)
{
m_force_failsafe_ = _force_failsafe_;
}

/*!
 * @brief This function returns the value of member force_failsafe_
 * @return Value of member force_failsafe_
 */
bool actuator_armed::force_failsafe_() const
{
    return m_force_failsafe_;
}

/*!
 * @brief This function returns a reference to member force_failsafe_
 * @return Reference to member force_failsafe_
 */
bool& actuator_armed::force_failsafe_()
{
    return m_force_failsafe_;
}

/*!
 * @brief This function sets a value in member in_esc_calibration_mode_
 * @param _in_esc_calibration_mode_ New value for member in_esc_calibration_mode_
 */
void actuator_armed::in_esc_calibration_mode_(bool _in_esc_calibration_mode_)
{
m_in_esc_calibration_mode_ = _in_esc_calibration_mode_;
}

/*!
 * @brief This function returns the value of member in_esc_calibration_mode_
 * @return Value of member in_esc_calibration_mode_
 */
bool actuator_armed::in_esc_calibration_mode_() const
{
    return m_in_esc_calibration_mode_;
}

/*!
 * @brief This function returns a reference to member in_esc_calibration_mode_
 * @return Reference to member in_esc_calibration_mode_
 */
bool& actuator_armed::in_esc_calibration_mode_()
{
    return m_in_esc_calibration_mode_;
}

/*!
 * @brief This function sets a value in member soft_stop_
 * @param _soft_stop_ New value for member soft_stop_
 */
void actuator_armed::soft_stop_(bool _soft_stop_)
{
m_soft_stop_ = _soft_stop_;
}

/*!
 * @brief This function returns the value of member soft_stop_
 * @return Value of member soft_stop_
 */
bool actuator_armed::soft_stop_() const
{
    return m_soft_stop_;
}

/*!
 * @brief This function returns a reference to member soft_stop_
 * @return Reference to member soft_stop_
 */
bool& actuator_armed::soft_stop_()
{
    return m_soft_stop_;
}


size_t actuator_armed::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;












    return current_align;
}

bool actuator_armed::isKeyDefined()
{
   return false;
}

void actuator_armed::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
}
